!function(){"use strict";var o={Android:function(){return navigator.userAgent.match(/Android/i)},BlackBerry:function(){return navigator.userAgent.match(/BlackBerry/i)},iOS:function(){return navigator.userAgent.match(/iPhone|iPad|iPod/i)},Opera:function(){return navigator.userAgent.match(/Opera Mini/i)},Windows:function(){return navigator.userAgent.match(/IEMobile/i)},any:function(){return o.Android()||o.BlackBerry()||o.iOS()||o.Opera()||o.Windows()}},e=function(){$(".js-backtotop").on("click",function(o){o.preventDefault(),$("html, body").animate({scrollTop:$("body").offset().top},700,"easeInOutExpo")})},t=function(){$(".js-next").on("click",function(o){o.preventDefault(),$("html, body").animate({scrollTop:$($.attr(this,"href")).offset().top},700,"easeInOutExpo")}),$(window).scroll(function(){$(this).scrollTop()>10?$(".js-next").addClass("probootstrap-sleep"):$(".js-next").removeClass("probootstrap-sleep")})},a=function(){$(".probootstrap-burger-menu").on("click",function(o){o.preventDefault(),$("body").hasClass("show")?($(".probootstrap-burger-menu").removeClass("active"),$("body").removeClass("show")):($(".probootstrap-burger-menu").addClass("active"),$("body").addClass("show"))}),$(window).width()>766?($("body").removeClass("probootstrap-mobile-menu-active"),$(".probootstrap-burger-menu").removeClass("active")):$("body").addClass("probootstrap-mobile-menu-active"),$(window).resize(function(){$(window).width()>766?($("body").removeClass("probootstrap-mobile-menu-active show"),$(".probootstrap-burger-menu").removeClass("active")):$("body").addClass("probootstrap-mobile-menu-active")}),$(document).click(function(o){var e=$(".probootstrap-nav, .probootstrap-burger-menu");e.is(o.target)||0!==e.has(o.target).length||$("body").hasClass("show")&&($("body").removeClass("show"),$(".probootstrap-burger-menu").removeClass("active"))})},i=function(){$(".js-probootstrap-search").on("click",function(){$("#probootstrap-search").addClass("active"),setTimeout(function(){$("#probootstrap-search").find("#search").focus().select()},500)}),$(".js-probootstrap-close").on("click",function(){$("#probootstrap-search").removeClass("active")})},n=function(){o.any()||$(".probootstrap-navbar .navbar-nav li.dropdown").hover(function(){$(this).find("> .dropdown-menu").stop(!0,!0).delay(200).fadeIn(500).addClass("animated-fast fadeInUp")},function(){$(this).find("> .dropdown-menu").stop(!0,!0).fadeOut(200).removeClass("animated-fast fadeInUp")})},r=function(){var o=$(".owl-carousel-carousel"),e=$(".owl-carousel-carousel2"),t=$(".owl-carousel-carousel3");o.owlCarousel({items:3,loop:!0,margin:20,nav:!1,dots:!1,smartSpeed:800,autoHeight:!0,navText:["<i class='icon-keyboard_arrow_left owl-direction'></i>","<i class='icon-keyboard_arrow_right owl-direction'></i>"],responsive:{0:{items:1},400:{items:1},600:{items:2},1e3:{items:3}}}),e.owlCarousel({items:3,loop:!0,margin:20,nav:!1,dots:!1,smartSpeed:800,autoHeight:!0,navText:["<i class='icon-keyboard_arrow_left owl-direction'></i>","<i class='icon-keyboard_arrow_right owl-direction'></i>"],responsive:{0:{items:1},400:{items:1},600:{items:2},1e3:{items:3}}}),t.owlCarousel({items:3,loop:!0,margin:20,nav:!1,dots:!1,smartSpeed:800,autoHeight:!0,navText:["<i class='icon-keyboard_arrow_left owl-direction'></i>","<i class='icon-keyboard_arrow_right owl-direction'></i>"],responsive:{0:{items:1},400:{items:1},600:{items:2},1e3:{items:3}}}),$(".probootstrap-owl-next").click(function(e){o.trigger("next.owl.carousel"),e.preventDefault()}),$(".probootstrap-owl-prev").click(function(e){o.trigger("prev.owl.carousel"),e.preventDefault()}),$(".probootstrap-owl-next2").click(function(o){e.trigger("next.owl.carousel"),o.preventDefault()}),$(".probootstrap-owl-prev2").click(function(o){e.trigger("prev.owl.carousel"),o.preventDefault()}),$(".probootstrap-owl-next3").click(function(o){t.trigger("next.owl.carousel"),o.preventDefault()}),$(".probootstrap-owl-prev3").click(function(o){t.trigger("prev.owl.carousel"),o.preventDefault()});var a=$(".owl-carousel-fullwidth");a.owlCarousel({loop:!0,margin:20,nav:!1,dots:!0,smartSpeed:800,autoHeight:!0,autoplay:!0,navText:["<i class='icon-keyboard_arrow_left owl-direction'></i>","<i class='icon-keyboard_arrow_right owl-direction'></i>"],responsive:{0:{items:1},980:{items:1},1100:{items:2}}}),(a=$(".owl-work")).owlCarousel({stagePadding:150,loop:!0,margin:20,nav:!0,dots:!1,mouseDrag:!1,autoWidth:!0,autoHeight:!0,autoplay:!0,autoplayTimeout:2e3,autoplayHoverPause:!0,navText:["<i class='icon-chevron-thin-left'></i>","<i class='icon-chevron-thin-right'></i>"],responsive:{0:{items:1,stagePadding:10},500:{items:2,stagePadding:20},600:{items:2,stagePadding:40},800:{items:2,stagePadding:100},1100:{items:3},1400:{items:4}}})},s=function(){$(".flexslider").flexslider({animation:"fade",prevText:"",nextText:"",slideshowSpeed:2e3,animationSpeed:600,slideshow:!0,directionNav:!1,controlNav:!0}),$(".flexslider2").flexslider({animation:"fade",prevText:"",nextText:"",slideshowSpeed:2e3,animationSpeed:600,slideshow:!0,directionNav:!1,controlNav:!1})},l=function(){var o=0;$(".probootstrap-animate").waypoint(function(e){"down"!==e||$(this.element).hasClass("probootstrap-animated")||(o++,$(this.element).addClass("item-animate"),setTimeout(function(){$("body .probootstrap-animate.item-animate").each(function(o){var e=$(this);setTimeout(function(){var o=e.data("animate-effect");"fadeIn"===o?e.addClass("fadeIn probootstrap-animated"):"fadeInLeft"===o?e.addClass("fadeInLeft probootstrap-animated"):"fadeInRight"===o?e.addClass("fadeInRight probootstrap-animated"):e.addClass("fadeInUp probootstrap-animated"),e.removeClass("item-animate")},100*o,"easeInOutExpo")})},200))},{offset:"95%"})},c=function(){$(".js-counter").countTo({formatter:function(o,e){return o.toFixed(e.decimals)}})},p=function(){$("#probootstrap-counter").length>0&&$("#probootstrap-counter").waypoint(function(o){"down"!==o||$(this.element).hasClass("probootstrap-animated")||(setTimeout(c,400),$(this.element).addClass("probootstrap-animated"))},{offset:"90%"})},d=function(){$(".image-popup").magnificPopup({type:"image",removalDelay:300,mainClass:"mfp-with-zoom",gallery:{enabled:!0},zoom:{enabled:!0,duration:300,easing:"ease-in-out",opener:function(o){return o.is("img")?o:o.find("img")}}}),$(".with-caption").magnificPopup({type:"image",closeOnContentClick:!0,closeBtnInside:!1,mainClass:"mfp-with-zoom mfp-img-mobile",image:{verticalFit:!0,titleSrc:function(o){return o.el.attr("title")+' &middot; <a class="image-source-link" href="'+o.el.attr("data-source")+'" target="_blank">image source</a>'}},zoom:{enabled:!0}}),$(".popup-youtube, .popup-vimeo, .popup-gmaps").magnificPopup({disableOn:700,type:"iframe",mainClass:"mfp-fade",removalDelay:160,preloader:!1,fixedContentPos:!1})},u=function(){o.any()||$(window).stellar()},m=function(){$("img.svg").each(function(){var o=$(this),e=o.attr("id"),t=o.attr("class"),a=o.attr("src");$.get(a,function(a){var i=jQuery(a).find("svg");void 0!==e&&(i=i.attr("id",e)),void 0!==t&&(i=i.attr("class",t+" replaced-svg")),i=i.removeAttr("xmlns:a"),o.replaceWith(i)},"xml")})},f=function(){$(".probootstrap-loader").fadeOut("slow")},v=function(){$(".js-gotop").on("click",function(o){return o.preventDefault(),$("html, body").animate({scrollTop:$("html").offset().top},500,"easeInOutExpo"),!1}),$(window).scroll(function(){$(window).scrollTop()>200?$(".js-top").addClass("active"):$(".js-top").removeClass("active")})};$(document).ready(function(){n(),p(),l(),e(),i(),d(),u(),a(),t(),f(),v(),m()}),$(window).load(function(){r(),s()})}();




! function($) {

    "use strict";

    var Typed = function(el, options) {

        // chosen element to manipulate text
        this.el = $(el);

        // options
        this.options = $.extend({}, $.fn.typed.defaults, options);

        // attribute to type into
        this.isInput = this.el.is('input');
        this.attr = this.options.attr;

        // show cursor
        this.showCursor = this.isInput ? false : this.options.showCursor;

        // text content of element
        this.elContent = this.attr ? this.el.attr(this.attr) : this.el.text()

        // html or plain text
        this.contentType = this.options.contentType;

        // typing speed
        this.typeSpeed = this.options.typeSpeed;

        // add a delay before typing starts
        this.startDelay = this.options.startDelay;

        // backspacing speed
        this.backSpeed = this.options.backSpeed;

        // amount of time to wait before backspacing
        this.backDelay = this.options.backDelay;

        // div containing strings
        this.stringsElement = this.options.stringsElement;

        // input strings of text
        this.strings = this.options.strings;

        // character number position of current string
        this.strPos = 0;

        // current array position
        this.arrayPos = 0;

        // number to stop backspacing on.
        // default 0, can change depending on how many chars
        // you want to remove at the time
        this.stopNum = 0;

        // Looping logic
        this.loop = this.options.loop;
        this.loopCount = this.options.loopCount;
        this.curLoop = 0;

        // for stopping
        this.stop = false;

        // custom cursor
        this.cursorChar = this.options.cursorChar;

        // shuffle the strings
        this.shuffle = this.options.shuffle;
        // the order of strings
        this.sequence = [];

        // All systems go!
        this.build();
    };

    Typed.prototype = {

        constructor: Typed

        ,
        init: function() {
            // begin the loop w/ first current string (global self.strings)
            // current string will be passed as an argument each time after this
            var self = this;
            self.timeout = setTimeout(function() {
                for (var i=0;i<self.strings.length;++i) self.sequence[i]=i;

                // shuffle the array if true
                if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);

                // Start typing
                self.typewrite(self.strings[self.sequence[self.arrayPos]], self.strPos);
            }, self.startDelay);
        }

        ,
        build: function() {
            var self = this;
            // Insert cursor
            if (this.showCursor === true) {
                this.cursor = $("<span class=\"typed-cursor\">" + this.cursorChar + "</span>");
                this.el.after(this.cursor);
            }
            if (this.stringsElement) {
                self.strings = [];
                this.stringsElement.hide();
                var strings = this.stringsElement.find('p');
                $.each(strings, function(key, value){
                    self.strings.push($(value).html());
                });
            }
            this.init();
        }

        // pass current string state to each function, types 1 char per call
        ,
        typewrite: function(curString, curStrPos) {
            // exit when stopped
            if (this.stop === true) {
                return;
            }

            // varying values for setTimeout during typing
            // can't be global since number changes each time loop is executed
            var humanize = Math.round(Math.random() * (100 - 30)) + this.typeSpeed;
            var self = this;

            // ------------- optional ------------- //
            // backpaces a certain string faster
            // ------------------------------------ //
            // if (self.arrayPos == 1){
            //  self.backDelay = 50;
            // }
            // else{ self.backDelay = 500; }

            // contain typing function in a timeout humanize'd delay
            self.timeout = setTimeout(function() {
                // check for an escape character before a pause value
                // format: \^\d+ .. eg: ^1000 .. should be able to print the ^ too using ^^
                // single ^ are removed from string
                var charPause = 0;
                var substr = curString.substr(curStrPos);
                if (substr.charAt(0) === '^') {
                    var skip = 1; // skip atleast 1
                    if (/^\^\d+/.test(substr)) {
                        substr = /\d+/.exec(substr)[0];
                        skip += substr.length;
                        charPause = parseInt(substr);
                    }

                    // strip out the escape character and pause value so they're not printed
                    curString = curString.substring(0, curStrPos) + curString.substring(curStrPos + skip);
                }

                if (self.contentType === 'html') {
                    // skip over html tags while typing
                    var curChar = curString.substr(curStrPos).charAt(0)
                    if (curChar === '<' || curChar === '&') {
                        var tag = '';
                        var endTag = '';
                        if (curChar === '<') {
                            endTag = '>'
                        } else {
                            endTag = ';'
                        }
                        while (curString.substr(curStrPos).charAt(0) !== endTag) {
                            tag += curString.substr(curStrPos).charAt(0);
                            curStrPos++;
                        }
                        curStrPos++;
                        tag += endTag;
                    }
                }

                // timeout for any pause after a character
                self.timeout = setTimeout(function() {
                    if (curStrPos === curString.length) {
                        // fires callback function
                        self.options.onStringTyped(self.arrayPos);

                        // is this the final string
                        if (self.arrayPos === self.strings.length - 1) {
                            // animation that occurs on the last typed string
                            self.options.callback();

                            self.curLoop++;

                            // quit if we wont loop back
                            if (self.loop === false || self.curLoop === self.loopCount)
                                return;
                        }

                        self.timeout = setTimeout(function() {
                            self.backspace(curString, curStrPos);
                        }, self.backDelay);
                    } else {

                        /* call before functions if applicable */
                        if (curStrPos === 0)
                            self.options.preStringTyped(self.arrayPos);

                        // start typing each new char into existing string
                        // curString: arg, self.el.html: original text inside element
                        var nextString = curString.substr(0, curStrPos + 1);
                        if (self.attr) {
                            self.el.attr(self.attr, nextString);
                        } else {
                            if (self.isInput) {
                                self.el.val(nextString);
                            } else if (self.contentType === 'html') {
                                self.el.html(nextString);
                            } else {
                                self.el.text(nextString);
                            }
                        }

                        // add characters one by one
                        curStrPos++;
                        // loop the function
                        self.typewrite(curString, curStrPos);
                    }
                    // end of character pause
                }, charPause);

                // humanized value for typing
            }, humanize);

        }

        ,
        backspace: function(curString, curStrPos) {
            // exit when stopped
            if (this.stop === true) {
                return;
            }

            // varying values for setTimeout during typing
            // can't be global since number changes each time loop is executed
            var humanize = Math.round(Math.random() * (100 - 30)) + this.backSpeed;
            var self = this;

            self.timeout = setTimeout(function() {

                // ----- this part is optional ----- //
                // check string array position
                // on the first string, only delete one word
                // the stopNum actually represents the amount of chars to
                // keep in the current string. In my case it's 14.
                // if (self.arrayPos == 1){
                //  self.stopNum = 14;
                // }
                //every other time, delete the whole typed string
                // else{
                //  self.stopNum = 0;
                // }

                if (self.contentType === 'html') {
                    // skip over html tags while backspacing
                    if (curString.substr(curStrPos).charAt(0) === '>') {
                        var tag = '';
                        while (curString.substr(curStrPos).charAt(0) !== '<') {
                            tag -= curString.substr(curStrPos).charAt(0);
                            curStrPos--;
                        }
                        curStrPos--;
                        tag += '<';
                    }
                }

                // ----- continue important stuff ----- //
                // replace text with base text + typed characters
                var nextString = curString.substr(0, curStrPos);
                if (self.attr) {
                    self.el.attr(self.attr, nextString);
                } else {
                    if (self.isInput) {
                        self.el.val(nextString);
                    } else if (self.contentType === 'html') {
                        self.el.html(nextString);
                    } else {
                        self.el.text(nextString);
                    }
                }

                // if the number (id of character in current string) is
                // less than the stop number, keep going
                if (curStrPos > self.stopNum) {
                    // subtract characters one by one
                    curStrPos--;
                    // loop the function
                    self.backspace(curString, curStrPos);
                }
                // if the stop number has been reached, increase
                // array position to next string
                else if (curStrPos <= self.stopNum) {
                    self.arrayPos++;

                    if (self.arrayPos === self.strings.length) {
                        self.arrayPos = 0;

                        // Shuffle sequence again
                        if(self.shuffle) self.sequence = self.shuffleArray(self.sequence);

                        self.init();
                    } else
                        self.typewrite(self.strings[self.sequence[self.arrayPos]], curStrPos);
                }

                // humanized value for typing
            }, humanize);

        }
        /**
         * Shuffles the numbers in the given array.
         * @param {Array} array
         * @returns {Array}
         */
        ,shuffleArray: function(array) {
            var tmp, current, top = array.length;
            if(top) while(--top) {
                current = Math.floor(Math.random() * (top + 1));
                tmp = array[current];
                array[current] = array[top];
                array[top] = tmp;
            }
            return array;
        }

        // Start & Stop currently not working

        // , stop: function() {
        //     var self = this;

        //     self.stop = true;
        //     clearInterval(self.timeout);
        // }

        // , start: function() {
        //     var self = this;
        //     if(self.stop === false)
        //        return;

        //     this.stop = false;
        //     this.init();
        // }

        // Reset and rebuild the element
        ,
        reset: function() {
            var self = this;
            clearInterval(self.timeout);
            var id = this.el.attr('id');
            this.el.after('<span id="' + id + '"/>')
            this.el.remove();
            if (typeof this.cursor !== 'undefined') {
                this.cursor.remove();
            }
            // Send the callback
            self.options.resetCallback();
        }

    };

    $.fn.typed = function(option) {
        return this.each(function() {
            var $this = $(this),
                data = $this.data('typed'),
                options = typeof option == 'object' && option;
            if (!data) $this.data('typed', (data = new Typed(this, options)));
            if (typeof option == 'string') data[option]();
        });
    };

    $.fn.typed.defaults = {
        strings: ["These are the default values...", "You know what you should do?", "Use your own!", "Have a great day!"],
        stringsElement: null,
        // typing speed
        typeSpeed: 0,
        // time before typing starts
        startDelay: 0,
        // backspacing speed
        backSpeed: 0,
        // shuffle the strings
        shuffle: false,
        // time before backspacing
        backDelay: 500,
        // loop
        loop: false,
        // false = infinite
        loopCount: false,
        // show cursor
        showCursor: true,
        // character for cursor
        cursorChar: "|",
        // attribute to type (null == text)
        attr: null,
        // either html or text
        contentType: 'html',
        // call when done callback function
        callback: function() {},
        // starting callback function before each string
        preStringTyped: function() {},
        //callback for every typed string
        onStringTyped: function() {},
        // callback for reset
        resetCallback: function() {}
    };


}(window.jQuery);

$("document").ready(function() {
  handleShowHideSidebar();
  handleEscKey();
  handleSideBarClick();
  handleTyping();
});

function handleShowHideSidebar() {
  var $menuButton = $("#menu-button i"),
      show = "animated slideInLeft",
      hide = "animated slideOutLeft";

  $menuButton.on("click", function() {
    var $sideBar = $("#sidebar");

    if ($sideBar.hasClass("slideInLeft")) {
      $sideBar
        .removeClass(show)
        .addClass(hide)
        .removeClass("hidden");
    } else {
      $sideBar
        .removeClass(hide)
        .addClass(show)
        .removeClass("hidden");
    }
  });
}

function handleSideBarClick() {
  $("#sidebar li a").on("click", function() {
    var href = $(this).attr("href");
    $("html, body").animate({
      scrollTop: $(href).offset().top
    }, 600);
    $("#sidebar")
      .removeClass("animated slideInLeft")
      .addClass("animated slideOutLeft");
    return false;
  });
}

function handleEscKey() {
  $(document).on("keyup", function(e) {
    if (e.keyCode === 27) {
      var href = $(this).attr("href");
      $("html, body").animate({
        scrollTop: $(href).offset().top
      }, 600);
      $("#sidebar")
        .removeClass("animated slideInLeft")
        .addClass("animated slideOutLeft");
      return false;
    }
  });
}

function handleTyping () {
  $(".element").typed({
    strings: ["a UX designer.", "a hiking lover.", "a travel addicted."],
    typeSpeed: 50,
    starDelay: 200,
    backDelay: 600,
    loop: true,
    showCursor: true,
    cursorChar: "|"
  });
}
